Practice Set 3


1. Explain the usage of interfaces / abstract classes.

An abstract class allows you to create functionality that subclasses can implement or override. An interface only allows you to define functionality, not implement it. And whereas a class can extend only one abstract class, it can take advantage of multiple interfaces.


2. Which features were added to interfaces in Java 8 and Java 9? Why? (like default methods,
private static methods)

Some new features to interface were introduced in Java 8 i.e. Default methods and Static methods feature. In Java 8, an interface can have only four types:

Constant variables
Abstract methods
Default methods
Static methods
Example


public interface TempI { 
  
    public abstract void div(int a, int b); 
  
public default void
    add(int a, int b) 
    { 
        System.out.print("Answer by Default method = "); 
        System.out.println(a + b); 
    } 
  
    public static void mul(int a, int b) 
    { 
        System.out.print("Answer by Static method = "); 
        System.out.println(a * b); 
    } 
} 
  
class Temp implements TempI { 
  
    @Override
    public void div(int a, int b) 
    { 
        System.out.print("Answer by Abstract method = "); 
        System.out.println(a / b); 
    } 
  
    public static void main(String[] args) 
    { 
        TempI in = new Temp(); 
        in.div(8, 2); 
        in.add(3, 1); 
        TempI.mul(4, 1); 
    } 
} 
OUTPUT : Answer by Abstract method = 4
         Answer by Default method = 4
         Answer by Static method = 4
Java 9 Interface Changes

Java 9 introduced private methods and private static method in interfaces. In Java 9 and later versions, an interface can have six different things:

Constant variables
Abstract methods
Default methods
Static methods
Private methods
Private Static methods
These private methods will improve code re-usability inside interfaces and will provide choice to expose only our intended methods implementations to users.These methods are only accessible within that interface only and cannot be accessed or inherited from an interface to another interface or class.



public interface TempI { 
  
    public abstract void mul(int a, int b); 
  
public default void
    add(int a, int b) 
    { 
// private method inside default method 
        sub(a, b);  
  
 // static method inside other non-static method 
        div(a, b); 
        System.out.print("Answer by Default method = "); 
        System.out.println(a + b); 
    } 
  
    public static void mod(int a, int b) 
    { 
        div(a, b); // static method inside other static method 
        System.out.print("Answer by Static method = "); 
        System.out.println(a % b); 
    } 
  
    private void sub(int a, int b) 
    { 
        System.out.print("Answer by Private method = "); 
        System.out.println(a - b); 
    } 
  
    private static void div(int a, int b) 
    { 
        System.out.print("Answer by Private static method = "); 
        System.out.println(a / b); 
    } 
} 
  
class Temp implements TempI { 
  
    @Override
    public void mul(int a, int b) 
    { 
        System.out.print("Answer by Abstract method = "); 
        System.out.println(a * b); 
    } 
  
    public static void main(String[] args) 
    { 
        TempI in = new Temp(); 
        in.mul(2, 3); 
        in.add(6, 2); 
        TempI.mod(5, 3); 
    } 
} 
OUTPUT : Answer by Abstract method = 6              // mul(2, 3) = 2*3 = 6
         Answer by Private method = 4               // sub(6, 2) = 6-2 = 4 
         Answer by Private static method = 3        // div(6, 2) = 6/2 = 3
         Answer by Default method = 8               // add(6, 2) = 6+2 = 8
         Answer by Private static method = 1        // div(5, 3) = 5/3 = 1 
         Answer by Static method = 2                // mod(5, 3) = 5%3 = 2
 
Rules For using Private Methods in Interfaces

Private interface method cannot be abstract and no private and abstract modifiers together.
Private method can be used only inside interface and other static and non-static interface methods.
Private non-static methods cannot be used inside private static methods.
We should use private modifier to define these methods and no lesser accessibility than private modifier.
 
So, from above it can be conlcuded that java 9 private interface methods can be static or instance. In both cases, the private method is not inherited by sub-interfaces or implementations. They are mainly there to improve code re-usability within interface only – thus improving encapsulation.





3. What is an immutable class? Explain the steps involved in creating an immutable class.

An object is immutable if its state cannot change after construction. Immutable objects don’t expose any way for other objects to modify their state; the object’s fields are initialized only once inside the constructor and never change again.

In order to create an immutable class, you should follow the below steps:

Make your class final, so that no other classes can extend it.

Make all your fields final, so that they’re initialized only once inside the constructor and never modified afterward.
Don’t expose setter methods.
When exposing methods which modify the state of the class, you must always return a new instance of the class.
If the class holds a mutable object:
Inside the constructor, make sure to use a clone copy of the passed argument and never set your mutable field to the real instance passed through constructor, this is to prevent the clients who pass the object from modifying it afterwards.
Make sure to always return a clone copy of the field and never return the real object instance.


4. Is it necessary that all properties of immutable class be final?

No,Class and members should be final.it is not mandatory to have all properties final to create an immutable object. In immutable objects you should not allow users to modify the variables of the class. You can do this just by making variables private and not providing setter methods to modify them

5. Why is String class in Java immutable?
The string is Immutable in Java because String objects are cached in String pool. ... Another reason of why String class is immutable could die due to HashMap. Since Strings are very popular as HashMap key, it's important for them to be immutable so that they can retrieve the value object which was stored in HashMap.

6. Explain the marker interfaces in Java with example. Explain Serializable and Cloneable.

It is an empty interface (no field or methods). Examples of marker interface are Serializable, Clonnable and Remote interface. All these interfaces are empty interfaces.

public interface Serializable 
{
  // nothing here
}
Examples of Marker Interface which are used in real-time applications :

Cloneable interface : Cloneable interface is present in java.lang package. There is a method clone() in Object class. A class that implements the Cloneable interface indicates that it is legal for clone() method to make a field-for-field copy of instances of that class.
Invoking Object’s clone method on an instance of the class that does not implement the Cloneable interface results in an exception CloneNotSupportedException being thrown. By convention, classes that implement this interface should override Object.clone() method.
Refer here for more details.


// Java program to illustrate Cloneable interface 
import java.lang.Cloneable; 
  
// By implementing Cloneable interface 
// we make sure that instances of class A 
// can be cloned. 
class A implements Cloneable 
{ 
    int i; 
    String s; 
  
    // A class constructor 
    public A(int i,String s) 
    { 
        this.i = i; 
        this.s = s; 
    } 
  
    // Overriding clone() method 
    // by simply calling Object class 
    // clone() method. 
    @Override
    protected Object clone() 
    throws CloneNotSupportedException 
    { 
        return super.clone(); 
    } 
} 
  
public class Test 
{ 
    public static void main(String[] args) 
        throws CloneNotSupportedException 
    { 
        A a = new A(20, "GeeksForGeeks"); 
  
        // cloning 'a' and holding 
        // new cloned object reference in b 
  
        // down-casting as clone() return type is Object 
        A b = (A)a.clone(); 
  
        System.out.println(b.i); 
        System.out.println(b.s); 
    } 
} 
Output:

20
GeeksForGeeks
Serializable interface : Serializable interface is present in java.io package. It is used to make an object eligible for saving its state into a file. This is called Serialization.
Classes that do not implement this interface will not have any of their state serialized or deserialized. All subtypes of a serializable class are themselves serializable.

// Java program to illustrate Serializable interface 
import java.io.*; 
  
// By implementing Serializable interface 
// we make sure that state of instances of class A 
// can be saved in a file. 
class A implements Serializable 
{ 
    int i; 
    String s; 
  
    // A class constructor 
    public A(int i,String s) 
    { 
        this.i = i; 
        this.s = s; 
    } 
} 
  
public class Test 
{ 
    public static void main(String[] args) 
      throws IOException, ClassNotFoundException 
    { 
        A a = new A(20,"GeeksForGeeks"); 
  
        // Serializing 'a' 
        FileOutputStream fos = new FileOutputStream("xyz.txt"); 
        ObjectOutputStream oos = new ObjectOutputStream(fos); 
        oos.writeObject(a); 
  
        // De-serializing 'a' 
        FileInputStream fis = new FileInputStream("xyz.txt"); 
        ObjectInputStream ois = new ObjectInputStream(fis); 
        A b = (A)ois.readObject();//down-casting object 
  
        System.out.println(b.i+" "+b.s); 
  
        // closing streams 
        oos.close(); 
        ois.close(); 
    } 
} 
Output:

20 GeeksForGeeks

Remote interface : Remote interface is present in java.rmi package. A remote object is an object which is stored at one machine and accessed from another machine. So, to make an object a remote object, we need to flag it with Remote interface. Here, Remote interface serves to identify interfaces whose methods may be invoked from a non-local virtual machine.Any object that is a remote object must directly or indirectly implement this interface. RMI (Remote Method Invocation) provides some convenience classes that remote object implementations can extend which facilitate remote object creation.



7. Is Externalizable a marker interface? Difference between Serializable and Externalizable.

Externalizable is not marker interface, you have to override writeExternal and readExternal method.

SERIALIZABLE	    
Serializable is a marker interface i.e. does not contain any method.
Serializable interface pass the responsibility of serialization to JVM and it’s default algorithm.
Default serialization does not call any class constructor.

EXTERNALIZABLE   
Externalizable interface contains two methods writeExternal() and readExternal() which implementing classes MUST override.                                              Externalizable provides control of serialization logic to programmer – to write custom logic.
A public no-arg constructor is required while using Externalizable interface.                                            

8. What is the difference between checked and unchecked exception? Give examples for each
from the JDK.

In Java, there are two types of exceptions:

1) Checked: are the exceptions that are checked at compile time. If some code within a method throws a checked exception, then the method must either handle the exception or it must specify the exception using throws keyword.

For example, consider the following Java program that opens file at location “C:\test\a.txt” and prints the first three lines of it. The program doesn’t compile, because the function main() uses FileReader() and FileReader() throws a checked exception FileNotFoundException. It also uses readLine() and close() methods, and these methods also throw checked exception IOException.

import java.io.*; 

class Main { 
	public static void main(String[] args) { 
		FileReader file = new FileReader("C:\\test\\a.txt"); 
		BufferedReader fileInput = new BufferedReader(file); 
		
		// Print first 3 lines of file "C:\test\a.txt" 
		for (int counter = 0; counter < 3; counter++) 
			System.out.println(fileInput.readLine()); 
		
		fileInput.close(); 
	} 
} 

2) Unchecked are the exceptions that are not checked at compiled time. In C++, all exceptions are unchecked, so it is not forced by the compiler to either handle or specify the exception. It is up to the programmers to be civilized, and specify or catch the exceptions.
In Java exceptions under Error and RuntimeException classes are unchecked exceptions, everything else under throwable is checked.

class Main { 
public static void main(String args[]) { 
	int x = 0; 
	int y = 10; 
	int z = y/x; 
} 
} 

9. Give examples for custom exceptions which are checked and unchecked exception.
class InvalidAgeException extends Exception{  
 InvalidAgeException(String s){  
  super(s);  
 }  
}  

class TestCustomException1{  
  
   static void validate(int age)throws InvalidAgeException{  
     if(age<18)  
      throw new InvalidAgeException("not valid");  
     else  
      System.out.println("welcome to vote");  
   }  
     
   public static void main(String args[]){  
      try{  
      validate(13);  
      }catch(Exception m){System.out.println("Exception occured: "+m);}  
  
      System.out.println("rest of the code...");  
  }  
}  

10. What is the difference between Exception and Error? Give examples of Errors.

Error : An Error “indicates serious problems that a reasonable application should not try to catch.”
Both Errors and Exceptions are the subclasses of java.lang.Throwable class.
Errors are the conditions which cannot get recovered by any handling techniques. 
It surely cause termination of the program abnormally. 
Errors belong to unchecked type and mostly occur at runtime. 
Some of the examples of errors are Out of memory error or a System crash error.

Exceptions : An Exception “indicates conditions that a reasonable application might want to catch.”
Exceptions are the conditions that occur at runtime and may cause the termination of program. 
But they are recoverable using try, catch and throw keywords.
Exceptions are divided into two catagories : checked and unchecked exceptions. Checked exceptions like IOException known to the compiler at compile time while unchecked exceptions like ArrayIndexOutOfBoundException known to the compiler at runtime. It is mostly caused by the program written by the programmer.

11. What is the difference between ClassNotFoundException and NoClassDefFoundError?

ClassNotFoundException occurs when you try to load a class at runtime using Class.forName() or loadClass() methods and requested classes are not found in classpath. Most of the time this exception will occur when you try to run application without updating classpath with JAR files. This exception is a checked Exception derived from java.lang.Exception class

NoClassDefFoundError occurs when class was present during compile time and program was compiled and linked successfully but class was not present during runtime. It is error which is derived from LinkageError

12. Explain how class loader works in Java. Can one class be loaded by two class loaders in
Java.

The Java ClassLoader is a part of the Java Runtime Environment that dynamically loads Java classes into the Java Virtual Machine. The Java run time system does not need to know about files and file systems because of classloaders.

Java classes aren’t loaded into memory all at once, but when required by an application. At this point, the Java ClassLoader is called by the JRE and these ClassLoaders load classes into memory dynamically.

13. Explain the difference between Comparable and Comparator.

A comparable object is capable of comparing itself with another object. The class itself must implements the java.lang.Comparable interface to compare its instances.

Comparator is external to the element type we are comparing. It’s a separate class. We create multiple separate classes (that implement Comparator) to compare by different members.

Collections class has a second sort() method and it takes Comparator. The sort() method invokes the compare() to sort objects
14. Compare String, StringBuffer and StringBuilder.


15. Explain the concept of constructor chaining.

Constructor chaining occurs through inheritance. A sub class constructor’s task is to call super class’s constructor first. This ensures that creation of sub class’s object starts with the initialization of the data members of the super class. There could be any numbers of classes in inheritance chain. Every constructor calls up the chain till class at the top is reached.

16. What is serialVersionUID?

SerialVersionUID is used to ensure that during deserialization the same class (that was used during serialize process) is loaded.


17. What is the difference between Iterator and ListIterator?

Iterators are used in Collection framework in Java to retrieve elements one by one. It can be applied to any Collection object. By using Iterator, we can perform both read and remove operations. Iterator must be used whenever we want to enumerate elements in all Collection framework implemented interfaces like Set, List, Queue, Deque and also in all implemented classes of Map interface. Iterator is the only cursor available for entire collection framewor

It is only applicable for List collection implemented classes like arraylist, linkedlist etc. It provides bi-directional iteration. ListIterator must be used when we want to enumerate elements of List. This cursor has more functionality(methods) than iterator.
18. What is the difference between fail-fast and fail-safe iterator? Explain

Fail-safe iterators means they will not throw any exception even if the collection is modified while iterating over it. Whereas Fail-fast iterators throw an exception(ConcurrentModificationException) if the collection is modified while iterating over it.

19. What is reflection? Where is it used?

Reflection is an API which is used to examine or modify the behavior of methods, classes, interfaces at runtime.

The required classes for reflection are provided under java.lang.reflect package.
Reflection gives us information about the class to which an object belongs and also the methods of that class which can be executed by using the object.
Through reflection we can invoke methods at runtime irrespective of the access specifier used with them.
20. What are the rules for overriding methods in Java?

The argument list should be exactly the same as that of the overridden method.
The return type should be the same or a subtype of the return type declared in the original overridden method in the superclass.
The access level cannot be more restrictive than the overridden method's access level. For example: If the superclass method is declared public then the overriding method in the subclass cannot be either private or protected.
Instance methods can be overridden only if they are inherited by the subclass.
A method declared final cannot be overridden.
A method declared static cannot be overridden but can be re-declared.
If a method cannot be inherited, then it cannot be overridden.
A subclass within the same package as the instance's superclass can override any superclass method that is not declared private or final.
A subclass in a different package can only override the non-final methods declared public or protected.
An overriding method can throw any uncheck exceptions, regardless of whether the overridden method throws exceptions or not. However, the overriding method should not throw checked exceptions that are new or broader than the ones declared by the overridden method. The overriding method can throw narrower or fewer exceptions than the overridden method.
Constructors cannot be overridden.
21. How to implement a Singleton in Java?

In object-oriented programming, a singleton class is a class that can have only one object (an instance of the class) at a time.
After first time, if we try to instantiate the Singleton class, the new variable also points to the first instance created. So whatever modifications we do to any variable inside the class through any instance, it affects the variable of the single instance created and is visible if we access that variable through any variable of that class type defined.
To design a singleton class:

Make constructor as private.
Write a static method that has return type object of this singleton class. Here, the concept of Lazy initialization is used to write this static method.
Normal class vs Singleton class: Difference in normal and singleton class in 
